#include <sourcemod>

#pragma semicolon 1
#pragma newdecls required

#define PLUGIN_VERSION "1.1"

char gS_DisallowedString[11][10] = {"\n", "\t", "\r", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x08"};

public Plugin myinfo =
{
	name = "Connect/Disconnect Exploit Fixer",
	author = "shavit",
	description = "That plugin is fixing is fixing an exploit that allows a cheater to get an IP of players and use a custom disconnect reason.",
	version = PLUGIN_VERSION
}

public void OnPluginStart()
{
	CreateConVar("sm_connection_fix_version", PLUGIN_VERSION, "Plugin version", FCVAR_NOTIFY|FCVAR_DONTRECORD);

	HookEvent("player_connect", Player_Connect, EventHookMode_Pre);
	HookEvent("player_disconnect", Player_Disconnect, EventHookMode_Pre);
}

public void OnPluginEnd()
{
	UnhookEvent("player_connect", Player_Connect, EventHookMode_Pre);
	UnhookEvent("player_disconnect", Player_Disconnect, EventHookMode_Pre);
}

public Action Player_Connect(Handle hEvent, const char[] Name, bool dB)
{
    if (!GetEventBool(hEvent, "bot"))
    {
        char address[64], name[MAX_NAME_LENGTH], networkid[32];
        GetEventString(hEvent, "address", address, sizeof(address));
        GetEventString(hEvent, "name", name, sizeof(name));
        GetEventString(hEvent, "networkid", networkid, sizeof(networkid));

        if (!StrEqual(address, ""))
        {
            LogToGame("\"%s<%d><%s><>\" connected, address \"%s\"", name, GetEventInt(hEvent, "userid"), networkid, address);
        }
        SetEventString(hEvent, "address", "");
        return Plugin_Changed;
    }
    return Plugin_Continue;
}

public Action Player_Disconnect(Handle hEvent, const char[] Name, bool dB)
{
	char reason[64];
	GetEventString(hEvent, "reason", reason, 64);

	bool Changed;

	for (int i = 0; i < sizeof(gS_DisallowedString); i++)
	{
		if (ReplaceString(reason, 64, gS_DisallowedString[i], ""))
		{
			Changed = true;
		}
	}

	if (Changed)
	{
		SetEventString(hEvent, "reason", reason);

		return Plugin_Changed;
	}
	
	return Plugin_Continue;
}
